\documentclass{article}

\usepackage{color}

\newcommand{\code}[1]{\texttt{#1}}
\newcommand{\regex}[1]{{\color{blue}\code{#1}}}
\newcommand{\codeblock}[1]{\noindent\begin{quote}\code{\\#1}\end{quote}}
\newcommand{\indt}{\hspace*{2em}}

\begin{document}

\title{Eredmel Specification}
\author{Kavi Gupta}
\maketitle

\section{Definitions}

\begin{enumerate}
\item ``regex'' refers to a modified version of the OpenJDK \textt{java.util.regex} package (updated to support repeated capturing groups) whose documentation is packaged with Eredmel
\item ``enregex'' refers to an enhanced regex library that allows for parenthesis matching and in quote / out of quote determination
\item An indentation is a sequence of whitespace that defaults to a single tab. (In all examples, I will be using four spaces to represent an indentation.)
\item The indentation level of a line is the number of indentations at the beginning of the line 
\item A block is a line with an indentation level of $n$, followed by any number of lines with indentation levels greater than $n$
\end{enumerate}

\section{Replacement Statements}
The syntax of a replacement statement is as follows:
\codeblock{
replace <regex>\\
\indt<replacement>}
The use of regex inputs means that replacement macroes do not need to have matched parentheses. If there are multiple lines, each line after the first will be assigned an indentation level of $(\mbox{Original indentation level}) - 1 + (\mbox{Regex match's first line's indentation level})$. The Eredmel Interpreter should go through each regex match and replace it with the given replacement text.

Replacement statements may only be placed at the beginning of an Enregex source file, and are evaluated before the rest of the file is interpreted in a top-down manner.

\section{Macro Definition Statements}
The syntax of a macro definition statement is as follows:
\codeblock{
define <enregex>\\
\indt<replacement>}
Macro definitions are similar to replacement statements except that they take enregexes instead of regexes. Additionally, they are not expanded at the point of definition, rather at the point of being called. Therefore, they can be expanded conditionally.

\section{Variable Definition Statements}
The syntax of a variable definition statement is as follows:
\codeblock{
define {<varname>}\\
\indt<value>
}
Variable Definition Statements are 

\section{Eredmel State}
The Eredmel State is a roster of defined macroes and evaluated variables, along with native handles.
\section{Defined Macroes}
Defined macroes are pairs of a macro matcher and a replacement.

\section{Interpretation}
A script in Eredmel is interpreted top-down with each block being fed into the interpreter.

\subsection{Block interpreter}
The interpreter will first try to match the block against a 
\begin{itemize}
\item System functions. These are covered in greater detail below. Basically, the argument to these is fully expanded and the results are fed into the system function, evaluated in Java.
\item Macro Expansion Statements. These are covered in greater detail below. These are directives to the interpreter that add or subtract macroes from the environment or conditionally expand macroes.
\item Valid enregex matches.
\end{itemize}

\end{document}
